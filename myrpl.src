*
* calc1.prg
*
*
* 
* 
*
ON KEY LABEL F10 RETURN
CLOSE DATABASES
PUBLIC DISPLAYX, INDATAENTRY, EXPONENTENTRY, NUMDEC, INDIRECT
DISPLAYX = ""
INDATAENTRY = .F.
EXPONENTENTRY = .F.
NUMDEC = 11
PUBLIC FACTOR, HP48COMPAT
FACTOR = PI()/180
HP48COMPAT = .T.
PUBLIC SUBPROGNUM
SUBPROGNUM = "0"
PUBLIC STANDARD, FIX
STANDARD = .T.
PUBLIC DEG, GRAD, RAD
DEG = .T.
PUBLIC STARTNOW, STARTMAX, STARTSTEP
PUBLIC FOR_MAX
PUBLIC CALC
PUBLIC INCASE, OPTIONFOUND
PUBLIC VAR_FOR
PUBLIC IFTRUE
PUBLIC INIF, INDO, INWHILE
SET DELETED ON
SET SAFETY OFF
USE mainprog.d ALIAS PSTACK0
GOTO TOP
SELECT 0
USE pstack1.d ALIAS PSTACK1
SELECT 0
USE pstack2.d ALIAS PSTACK2
SELECT 0
USE pstack3.d ALIAS PSTACK3
SELECT 0
USE pstack4.d ALIAS PSTACK4
SELECT 0
USE pstack5.d ALIAS PSTACK5
SELECT 0
USE pstack6.d ALIAS PSTACK6
SELECT 0
USE pstack7.d ALIAS PSTACK7
SELECT 0
USE pstack8.d ALIAS PSTACK8
SELECT 0
USE pstack9.d ALIAS PSTACK9
SELECT 0
USE trace.d
TRACE_ON = .F.
SELECT 0
USE mem.d ALIAS MEM
SELECT 0
USE memvars.d ORDER memname
SELECT 0
USE subroutines.d ALIAS SUBROUTINES
SELECT 0
USE CALCBUTTONS.d ALIAS CALCBUTTONS
SELECT 0
USE stack.d ALIAS STACK
PACK
GOTO BOTTOM
DO FORM calc5 NAME CALC
READ EVENTS
ENDPROC
**
* 

*
*
* calc_add.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVELX = TRIM(STACK)
IF SUBSTR(LEVELX, 1, 2)="{ "
LEVELX = "{"+SUBSTR(LEVELX, 3, LEN(LEVELX)-2)
ENDIF
IF SUBSTR(LEVELX, LEN(LEVELX)-1, 2)=" }"
LEVELX = SUBSTR(LEVELX, 1, LEN(LEVELX)-2)+"}"
ENDIF
IF INDATAENTRY
REPLACE STACK WITH ALLTRIM(STR(VAL(DISPLAYX)+VAL(STACK), 20, NUMDEC))
IF STANDARD
REPLACE STACK WITH QUITACEROS(STACK)
ENDIF
ELSE
SKIP -1
ST = TRIM(STACK)
IF SUBSTR(ST, 1, 2)="{ "
ST = "{"+SUBSTR(ST, 3, LEN(ST)-2)
ENDIF
IF SUBSTR(ST, LEN(ST)-1, 2)=" }"
ST = SUBSTR(ST, 1, LEN(ST)-2)+"}"
ENDIF
DO CASE
CASE SUBSTR(ST, 1, 1)="{" .AND. SUBSTR(LEVELX, 1, 1)<>"{"
IF ST="{}"
ST2 = SUBSTR(ST, 1, LEN(ST)-1)+LEVELX+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ELSE
ST2 = SUBSTR(ST, 1, LEN(ST)-1)+" "+LEVELX+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ENDIF
CASE SUBSTR(ST, 1, 1)<>"{" .AND. SUBSTR(LEVELX, 1, 1)="{"
IF LEVELX="{}"
ST2 = "{"+ST+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ELSE
ST2 = "{"+ST+" "+SUBSTR(LEVELX, 2, LEN(LEVELX)-2)+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ENDIF
CASE SUBSTR(ST, 1, 1)="{" .AND. SUBSTR(LEVELX, 1, 1)="{"
ST2 = SUBSTR(ST, 1, LEN(ST)-1)+" "+SUBSTR(LEVELX, 2, LEN(LEVELX)-1)
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
CASE SUBSTR(ST, 1, 1)='"'
ST2 = SUBSTR(ST, 1, LEN(ST)-1)+SUBSTR(LEVELX, 2, LEN(LEVELX)-1)
IF LEN(ST2)>254
DISPLAYX = "Answer too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
OTHERWISE
REPLACE STACK WITH ALLTRIM(STR(VAL(LEVELX)+VAL(STACK), 20, NUMDEC))
IF STANDARD
REPLACE STACK WITH QUITACEROS(STACK)
ENDIF
ENDCASE
SKIP
DELETE
SKIP -1
ENDIF
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
ENDPROC
**
* 

*
*
* calc_minus.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
IF INDATAENTRY
REPLACE STACK WITH ALLTRIM(STR(-VAL(DISPLAYX)+VAL(STACK), 20, NUMDEC))
ELSE
SKIP -1
REPLACE STACK WITH ALLTRIM(STR(-VAL(MVALUE)+VAL(STACK), 20, NUMDEC))
SKIP
DELETE
SKIP -1
ENDIF
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
ENDPROC
**
* 

*
*
* calc_multiply.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
IF INDATAENTRY
REPLACE STACK WITH ALLTRIM(STR(VAL(DISPLAYX)*VAL(STACK), 20, NUMDEC))
ELSE
SKIP -1
REPLACE STACK WITH ALLTRIM(STR(VAL(MVALUE)*VAL(STACK), 20, NUMDEC))
SKIP
DELETE
SKIP -1
ENDIF
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
ENDPROC
**
* 

*
*
* calc_division.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
IF INDATAENTRY
REPLACE STACK WITH ALLTRIM(STR(VAL(STACK)/VAL(DISPLAYX), 20, NUMDEC))
ELSE
SKIP -1
REPLACE STACK WITH ALLTRIM(STR(VAL(STACK)/VAL(MVALUE), 20, NUMDEC))
SKIP
DELETE
SKIP -1
ENDIF
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
ENDPROC
**
* 

*
*
* paper.bmp
*
*
*
* dup.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
ENDPROC
**
* 

*
*
* calc_drop.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
DELETE
GOTO BOTTOM
ENDPROC
**
* 

*
*
* clx.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH "0"
ENDPROC
**
* 

*
*
* swap.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NSTACK
IF NSTACK<2
DISPLAYX = "Error: stack levels < 2"
RETURN
ENDIF
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
REPLACE STACK WITH MVALUE
SKIP
REPLACE STACK WITH MVALUE2
ENDPROC
**
* 

*
*
* clstack.prg
*
*
* 
* 
*
SELECT STACK
ZAP
ENDPROC
**
* 

*
*
* stackpack.prg
*
*
* 
* 
*
SELECT STACK
PACK
USE stack
GOTO BOTTOM
ENDPROC
**
* 

*
*
* pick.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
NVALUE = VAL(STACK)
DELETE
SKIP -NVALUE
LEVELN = STACK
APPEND BLANK
REPLACE STACK WITH LEVELN
CALC.REFRESH
ENDPROC
**
* 

*
*
* sto.prg
*
*
* 
* 
*
SELECT STACK
SET EXACT ON
GOTO BOTTOM
IF SUBSTR(STACK, LEN(TRIM(STACK)), 1)="'"
REPLACE STACK WITH SUBSTR(STACK, 1, LEN(TRIM(STACK))-1)
ENDIF
IF INDATAENTRY
IF INDIRECT
GOINDIRECT = VAL(DISPLAYX)
SELECT MEM
GOTO GOINDIRECT+1
GOMEM = VAL(MEM.MEM)
ELSE
GOMEM = VAL(DISPLAYX)
ENDIF
ELSE
IF INDIRECT
IF SUBSTR(STACK.STACK, 1, 1)="'"
SELECT MEMVARS
SEEK TRIM(SUBSTR(STACK.STACK, 2, 11)) 
IF  .NOT. FOUND()
WAIT WINDOW AT 1, 1 "Error"
SET EXACT OFF
ELSE
GOMEM = VAL(MEMVARS.MEM)
ENDIF
ELSE
GOINDIRECT = VAL(STACK.STACK)
SELECT MEM
GOTO GOINDIRECT+1
GOMEM = VAL(MEM.MEM)
ENDIF
SELECT STACK
DELETE
SKIP -1
ELSE
IF SUBSTR(STACK.STACK, 1, 1)="'"
SELECT MEMVARS
SEEK TRIM(SUBSTR(STACK.STACK, 2, 11)) 
IF  .NOT. FOUND()
APPEND BLANK
REPLACE MEMNAME WITH SUBSTR(STACK.STACK, 2, 11)
ENDIF
SELECT STACK
DELETE
SKIP -1
SELECT MEMVARS
REPLACE MEM WITH STACK.STACK
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
INDIRECT = .F.
IF HP48COMPAT
SELECT STACK
DELETE
SKIP -1
ENDIF
SET EXACT OFF
RETURN
ELSE
GOMEM = VAL(STACK.STACK)
DELETE
SKIP -1
ENDIF
ENDIF
ENDIF
SELECT MEM
GOTO GOMEM+1
REPLACE MEM.MEM WITH STACK.STACK
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
INDIRECT = .F.
IF HP48COMPAT
SELECT STACK
DELETE
SKIP -1
ENDIF
SET EXACT OFF
ENDPROC
**
* 

*
*
* rcl.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SET EXACT ON
IF SUBSTR(STACK, LEN(TRIM(STACK)), 1)="'"
REPLACE STACK WITH SUBSTR(STACK, 1, LEN(TRIM(STACK))-1)
ENDIF
IF INDATAENTRY
IF INDIRECT
GOINDIRECT = VAL(DISPLAYX)
SELECT MEM
GOTO GOINDIRECT+1
GOMEM = VAL(MEM.MEM)
ELSE
GOMEM = VAL(DISPLAYX)
ENDIF
ELSE
IF INDIRECT
IF SUBSTR(STACK.STACK, 1, 1)="'"
SELECT MEMVARS
SEEK TRIM(SUBSTR(STACK.STACK, 2, 11)) 
IF  .NOT. FOUND()
WAIT WINDOW AT 1, 1 "Error"
ELSE
GOMEM = VAL(MEMVARS.MEM)
ENDIF
ELSE
GOINDIRECT = VAL(STACK.STACK)
SELECT MEM
GOTO GOINDIRECT+1
GOMEM = VAL(MEM.MEM)
ENDIF
SELECT STACK
DELETE
SKIP -1
ELSE
IF SUBSTR(STACK.STACK, 1, 1)="'"
SELECT MEMVARS
SEEK TRIM(SUBSTR(STACK.STACK, 2, 11)) 
IF  .NOT. FOUND()
WAIT WINDOW AT 1, 1 "Error"
SET EXACT OFF
ELSE
ENDIF
SELECT STACK
DELETE
SKIP -1
APPEND BLANK
REPLACE STACK.STACK WITH MEMVARS.MEM
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
SET EXACT OFF
RETURN
ELSE
GOMEM = VAL(STACK.STACK)
DELETE
SKIP -1
ENDIF
ENDIF
ENDIF
SELECT MEM
GOTO GOMEM+1
SELECT STACK
APPEND BLANK
REPLACE STACK.STACK WITH MEM.MEM
INDIRECT = .F.
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
SET EXACT OFF
ENDPROC
**
* 

*
*
* ind.prg
*
*
* 
* 
*
INDIRECT = .T.
ENDPROC
**
* 

*
*
* purge.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
ST = TRIM(STACK.STACK)
SELECT MEMVARS
IF SUBSTR(ST, LEN(ST), 1)="'"
SEEK SUBSTR(ST, 2, LEN(ST)-2) 
ELSE
SEEK SUBSTR(ST, 1, LEN(ST)-1) 
ENDIF
IF  .NOT. FOUND()
WAIT WINDOW "Variable not found"
ELSE
DELETE
ENDIF
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* clreg.prg
*
*
* 
* 
*
SELECT MEM
REPLACE MEM WITH "0" ALL
GOTO TOP
ENDPROC
**
* 

*
*
* clvars.prg
*
*
* 
* 
*
SELECT MEMVARS
ZAP
ENDPROC
**
* 

*
*
* clp.prg
*
*
* 
* 
*
SELECT PSTACK0
ZAP
SELECT STACK
ENDPROC
**
* 

*
*
* runprog.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
ENDPROG = .F.
IF VAL(SUBPROGNUM)>0
GOTO TOP
ENDIF
DO WHILE .T.
ULINE = ALLTRIM(UPPER(LINE))
IF TRACE_ON
PRESAREA = SELECT()
SELECT STACK
GOTO BOTTOM
IF EOF() .AND. BOF()
ST = "EMPTY STACK"
ELSE
ST = STACK
ENDIF
SELECT TRACE
APPEND BLANK
REPLACE TRACE.LINE WITH ULINE
REPLACE TRACE.REG WITH RECNO()
REPLACE TRACE.X WITH ST
SELECT (PRESAREA)
ENDIF
DO CASE
CASE LEN(ALLTRIM(LINE))=0
CASE SUBSTR(LINE, 1, 1)$"01234567890."
NUMBERTOPSTACK()
CASE SUBSTR(LINE, 1, 1)="'" .OR. SUBSTR(LINE, 1, 1)="{"
VARTOPSTACK()
CASE SUBSTR(LINE, 1, 1)='"'
VARTOPSTACK()
CASE TRIM(LINE)="<<" .AND. LEN(TRIM(LINE))=2
CASE TRIM(LINE)=">>" .AND. LEN(TRIM(LINE))=2
CASE LINE=">="
L2_GREATER_OR_EQUAL_L1()
CASE LINE=">"
L2_GREATER_L1()
CASE LINE="=="
L2_EQUAL_L1()
CASE LINE="#"
L2_DIFFERENT_L1()
CASE LINE="<" .AND. LEN(TRIM(LINE))=1
L2_LESS_L1()
CASE LINE="<="
L2_LESS_OR_EQUAL_L1()
CASE ULINE="SECONDS"
SECS()
CASE ULINE="X=0?"
XEQUAL0()
CASE ULINE="X=Y?"
PXEQUALY()
CASE ULINE="X#0?"
XDIFF0()
CASE ULINE="X#Y?"
XDIFFY()
CASE ULINE="X>0?"
X_GREATER_0()
CASE ULINE="X>Y?"
X_GREATER_Y()
CASE ULINE="X<0?"
X_MINOR_0()
CASE ULINE="X<Y?"
X_MINOR_Y()
CASE ULINE="X<=0?"
X_MINOREQUAL_0()
CASE ULINE="X<=Y?"
X_MINOREQUAL_Y()
CASE ULINE="X<=0?"
X_MAJOREQUAL_0()
CASE ULINE="X<=Y?"
X_MAJOREQUAL_Y()
CASE ULINE="AND"
F_AND()
CASE ULINE="OR"
F_OR()
CASE ULINE="XOR"
F_XOR()
CASE ULINE="NOT"
F_NOT()
CASE LINE="+" .AND. LEN(TRIM(LINE))=1
CALC_ADD()
CASE LINE="->" .AND. LEN(TRIM(LINE))=2
STACKTOVARS()
CASE LINE="-" .AND. LEN(TRIM(LINE))=1
CALC_MINUS()
CASE LINE="*" .AND. LEN(TRIM(LINE))=1
CALC_MULTIPLY()
CASE LINE="/" .AND. LEN(TRIM(LINE))=1
CALC_DIVISION()
CASE ULINE="CHS"
CHS()
CASE ULINE="CLX"
CLX()
CASE ULINE="GTO"
PGTO()
CASE ULINE="XEQ"
ADD_RETURN()
GTO()
CASE ULINE="RTN"
RTN()
IF ENDPROG
RETURN
ENDIF
CASE ULINE="LBL"
CASE ULINE="NOP"
CASE ULINE="STOP" .OR. ULINE="HALT"
SKIP
EXIT
CASE ULINE="PROMPT"
F_PROMPT()
SKIP
EXIT
CASE ULINE="HEAD"
HLIST()
CASE ULINE="TAIL"
TLIST()
CASE ULINE="GET"
F_GET()
CASE ULINE="PUT"
F_PUT()
CASE ULINE="SUB"
SUB()
CASE ULINE="SIZE"
F_SIZE()
CASE ULINE="->LIST"
TOLIST()
CASE ULINE="LIST->"
FROMLIST()
CASE ULINE="LISTCH"
LISTCHARS()
CASE ULINE="RDN"
RDN()
CASE ULINE="RDN3"
RDN3()
CASE ULINE="ROT"
ROT()
CASE ULINE="RUP" .OR. ULINE="R^"
RUP()
CASE ULINE="SWAP" .OR. ULINE="X<>Y"
SWAP()
CASE ULINE="DROP" .AND. LEN(TRIM(LINE))=4
CALC_DROP()
CASE ULINE="DUP" .AND. LEN(TRIM(LINE))=3
DUP()
CASE ULINE="ENTER"
ENTER()
CASE ULINE="CLEAR" .OR. ULINE="CLST"
CLSTACK()
CASE ULINE="OVER"
F_OVER()
CASE ULINE="PICK"
PICK()
CASE ULINE="ROLLD"
ROLLD()
CASE ULINE="ROLL"
F_ROLL()
CASE ULINE="DEPTH"
DEPTH()
CASE ULINE="DUP2"
DUP2()
CASE ULINE="DUPN"
DUPN()
CASE ULINE="DROP2"
DROP2()
CASE ULINE="DROPN"
DROPN()
CASE ULINE="STO"
STO()
CASE ULINE="RCL" .AND. LEN(TRIM(LINE))=3
RCL()
CASE ULINE="IND"
IND()
CASE ULINE="CLRG" .OR. ULINE="CLEAR"
CLREG()
CASE ULINE="CLVARS"
CLVARS()
CASE ULINE="PURGE"
PURGE()
CASE ULINE="SIZE?"
ASKMEMSIZE()
CASE ULINE="MSIZE"
SETMEMSIZE()
CASE ULINE="ASSIGN"
TOBUTTON()
CASE ULINE="CLBUTT"
CLBUTT()
CASE ULINE="SQRT" .OR. ULINE="V^"
F_SQRT()
CASE ULINE="SQ" .OR. ULINE="X^2"
F_X2()
CASE ULINE="LN"
F_LN()
CASE ULINE="LOG"
F_LOG()
CASE ULINE="E^X" .OR. ULINE="EXP"
F_ERAISEDTOX()
CASE ULINE="10^X" .OR. ULINE="ALOG"
F_10RAISEDTOX()
CASE ULINE="Y^X" .OR. ULINE="^"
F_YRAISEDTOX()
CASE ULINE="Y^1/X" .OR. ULINE="XROOT"
F_ROOTXOFY()
CASE ULINE="1/X" .OR. ULINE="INV"
F_1DIVX()
CASE ULINE="SIN"
F_SIN()
CASE ULINE="COS"
F_COS()
CASE ULINE="TAN"
F_TAN()
CASE ULINE="PI"
F_PI()
CASE ULINE="ASIN"
F_ASIN()
CASE ULINE="ACOS"
F_ACOS()
CASE ULINE="ATAN"
F_ATAN()
CASE ULINE="INT"
F_INT()
CASE ULINE="FRC"
F_FRC()
CASE ULINE="FACT" .OR. LINE="!"
F_FACT()
CASE ULINE="IP"
F_IP()
CASE ULINE="FP"
F_FP()
CASE ULINE="EVAL"
F_EVAL()
CASE ULINE="FOR"
FOR_START()
CASE ULINE="STEPFOR"
FOR_STEP()
CASE ULINE="ENDFOR"
END_FOR()
CASE ULINE="START"
PSTART()
CASE ULINE="STEP"
PSTEP()
CASE ULINE="NEXT"
PNEXT()
CASE ULINE="IFTE"
IFTE()
CASE ULINE="IFT"
IFT()
CASE ULINE="IF"
INIF = .T.
CASE ULINE="THEN"
IF_THEN()
CASE ULINE="ELSE"
ELSE_IF()
CASE ULINE="ENDIF"
INIF = .F
CASE ULINE="WHILE"
INWHILE = .T.
CASE ULINE="REPEAT"
WHILE_REPEAT()
CASE ULINE="LOOP"
WHILE_LOOP()
CASE ULINE="EXIT"
WHILE_EXIT()
INWHILE = .F.
CASE ULINE="ENDWHILE"
WHILE_END()
CASE ULINE="DO"
INDO = .T.
CASE ULINE="UNTIL"
CASE ULINE="ENDDO"
END_DO()
CASE ULINE="CASE"
INCASE = .T.
OPTIONFOUND = .F.
CASE ULINE="ENDCASE"
INCASE = .F.
OPTIONFOUND = .F.
CASE ULINE="ENDOPTION"
CASE_END()
CASE ULINE="END"
F_END()
CASE ULINE="FIX"
FIX()
CASE ULINE="DEG"
DEG()
CASE ULINE="RAD"
RAD()
CASE ULINE="GRAD"
GRAD()
CASE SUBSTR(LINE, 1, 2)="<<"
IF VAL(SUBPROGNUM)=0
CREATELINE()
SELECT PSTACK1
ELSE
CREATEPSTACK()
SELECT STACK
GOTO BOTTOM
ENDIF
SUBPROGNUM = STR(VAL(SUBPROGNUM)+1, 1, 0)
RUNPROG()
OTHERWISE
VARTOPSTACK()
REPLACE STACK WITH "'"+STACK
RCL()
IF SUBSTR(STACK.STACK, 1, 2)="<<"
CREATEPSTACK()
SELECT STACK
DELETE
GOTO BOTTOM
RUNPROG()
ENDIF
ENDCASE
SELECT PSTACK&SUBPROGNUM
IF EOF()
SUBPROGNUM = STR(VAL(SUBPROGNUM)-1, 1, 0)
EXIT
ENDIF
SKIP
ENDDO
ENDPROC
**
* 

*
*
* loadprog.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT PSTACK0
ZAP
APPEND FROM &PNAME..PR FIELDS LINE SDF
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* saveprog.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT PSTACK0
COPY TO &PNAME..PR FIELDS LINE TYPE SDF
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* tobutton.prg
*
*
* 
* 
*
PUBLIC NBUTTON, NCAPTION
SELECT STACK
SKIP -1
NBUTTON = ALLTRIM(STACK.STACK)
IF SUBSTR(NBUTTON, 1, 1)="'"
DISPLAYX = "Error, numeric button expected in Y"
RETURN
ENDIF
IF VAL(NBUTTON)<1 .OR. VAL(NBUTTON)>MAXBUTTONS
DISPLAYX = "Out of range in Y"
RETURN
ENDIF
DELETE
SKIP
ST = ALLTRIM(STACK.STACK)
IF SUBSTR(ST, 1, 1)<>"'"
DISPLAYX = "Variable expected in X"
RETURN
ENDIF
IF SUBSTR(ST, LEN(ST), 1)="'"
NCAPTION = SUBSTR(ST, 2, LEN(ST)-2)
ELSE
NCAPTION = SUBSTR(ST, 2, LEN(ST)-1)
ENDIF
IF SUBSTR(NCAPTION, LEN(NCAPTION), 1)="'"
NCAPTION = SUBSTR(NCAPTION, 1, LEN(NCAPTION)-1)
ENDIF
DELETE
GOTO BOTTOM
SELECT CALCBUTTONS
GOTO VAL(NBUTTON)
REPLACE CALCBUTTONS.NAME WITH NCAPTION
SELECT STACK
CALC.BUTTON&NBUTTON..CAPTION = NCAPTION
ENDPROC
**
* 

*
*
* fix.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF INDATAENTRY
NUMDEC = VAL(DISPLAYX)
ELSE
NUMDEC = VAL(STACK)
DELETE
GOTO BOTTOM
ENDIF
FIX = .T.
STANDARD = .F.
INDATAENTRY = .F.
DISPLAYX = ""
EXPONENTENTRY = .F.
ENDPROC
**
* 

*
*
* prgtostk.prg
*
*
* 
* 
*
SELECT PSTACK0
PRGSTK = "<<"
SCAN
PRGSTK = PRGSTK+TRIM(PSTACK0.LINE)+SPACE(1)
ENDSCAN
PRGSTK = PRGSTK+">>"
IF LEN(PRGSTK)>254
DISPLAYX = "Program too large to fit in level x"
RETURN
ENDIF
SELECT STACK
APPEND BLANK
REPLACE STACK.STACK WITH PRGSTK
ENDPROC
**
* 

*
*
* f_sin.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(SIN(FACTOR*VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_asin.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(ASIN(VAL(STACK.STACK))/FACTOR, 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_pi.prg
*
*
* 
* 
*
SELECT STACK
APPEND BLANK
REPLACE STACK.STACK WITH "3.141592653590"
ENDPROC
**
* 

*
*
* f_x2.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(VAL(STACK.STACK)**2, 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_sqrt.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(SQRT(VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_1divx.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH ALLTRIM(STR(1/VAL(STACK), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_cos.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(COS(FACTOR*VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_tan.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(TAN(FACTOR*VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_acos.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(ACOS(VAL(STACK.STACK))/FACTOR, 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_atan.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(ATAN(VAL(STACK.STACK))/FACTOR, 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_yraisedtox.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SKIP -1
M.Y = VAL(STACK.STACK)
DELETE
SKIP
REPLACE STACK.STACK WITH ALLTRIM(STR(M.Y**VAL(STACK.STACK), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_rootxofy.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SKIP -1
M.Y = VAL(STACK.STACK)
DELETE
SKIP
REPLACE STACK.STACK WITH ALLTRIM(STR(M.Y**(1/VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_ln.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(LOG(VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_eraisedtox.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(EXP(VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_log.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(LOG(VAL(STACK.STACK))/2.302585092994 , 20, NUMDEC))
ENDPROC
**
* 

*
*
* f_10raisedtox.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK.STACK WITH ALLTRIM(STR(10**(VAL(STACK.STACK)), 20, NUMDEC))
ENDPROC
**
* 

*
*
* hlist.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))=2
RETURN
ENDIF
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))>2
REPLACE STACK WITH SUBSTR(STACK, 1, 2)+'"'
RETURN
ENDIF
REPLACE STACK WITH SINGLESPACE(STACK)
REPLACE STACK.STACK WITH HEADLIST(TRIM(STACK.STACK))
ENDPROC
**
* 

*
*
* tlist.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))=2
RETURN
ENDIF
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))>2
REPLACE STACK WITH '"'+SUBSTR(STACK, 3, LEN(TRIM(STACK))-2)
RETURN
ENDIF
REPLACE STACK WITH SINGLESPACE(STACK)
REPLACE STACK.STACK WITH TAILLIST(TRIM(STACK.STACK))
ENDPROC
**
* 

*
*
* enter.prg
*
*
* 
* 
*
SELECT STACK
IF LEN(ALLTRIM(DISPLAYX))=0
DUP()
ELSE
APPEND BLANK
REPLACE STACK.STACK WITH DISPLAYX
INDATAENTRY = .F.
EXPONENTENTRY = .F.
SELECT MEMVARS
SEEK TRIM(STACK.STACK) 
IF FOUND()
SELECT STACK
REPLACE STACK WITH "'"+STACK
RCL()
IF SUBSTR(STACK.STACK, 1, 2)="<<"
CREATEPSTACK()
SELECT STACK
DELETE
GOTO BOTTOM
RUNPROG()
ENDIF
ENDIF
ENDIF
SELECT STACK
ENDPROC
**
* 

*
*
* chs.prg
*
*
* 
* 
*
IF INDATAENTRY
IF EXPONENTENTRY
IF AT("E-", DISPLAYX)>0
EXPPOS = AT("E", DISPLAYX)
DISPLAYX = SUBSTR(DISPLAYX, 1, EXPPOS)+SUBSTR(DISPLAYX, EXPPOS+2, LEN(DISPLAYX)-EXPPOS-1)
ELSE
EXPPOS = AT("E", DISPLAYX)
DISPLAYX = SUBSTR(DISPLAYX, 1, EXPPOS)+"-"+SUBSTR(DISPLAYX, EXPPOS+1, LEN(DISPLAYX)-EXPPOS)
ENDIF
ELSE
IF SUBSTR(DISPLAYX, 1, 1)<>"-"
DISPLAYX = "-"+DISPLAYX
ELSE
DISPLAYX = SUBSTR(DISPLAYX, 2, LEN(ALLTRIM(DISPLAYX))-1)
ENDIF
ENDIF
ELSE
SELECT STACK
GOTO BOTTOM
IF SUBSTR(STACK, 1, 1)<>"-"
REPLACE STACK WITH "-"+STACK
ELSE
REPLACE STACK WITH SUBSTR(STACK, 2, LEN(ALLTRIM(STACK))-1)
ENDIF
ENDIF
ENDPROC
**
* 

*
*
* createpstack.prg
*
*
* 
* 
*
SUBPROGNUM = STR(VAL(SUBPROGNUM)+1, 1, 0)
PRGSTACK = TRIM(STACK.STACK)
SELECT PSTACK&SUBPROGNUM
ZAP
APPEND BLANK
FOR I = 1 TO LEN(PRGSTACK)-4
IF SUBSTR(PRGSTACK, I+2, 1)=" "
APPEND BLANK
ENDIF
REPLACE PSTACK&SUBPROGNUM..LINE WITH TRIM(PSTACK&SUBPROGNUM..LINE) + SUBSTR(PRGSTACK, I+2, 1 ) 
ENDFOR
GOTO TOP
DO WHILE  .NOT. EOF()
IF INLIST( TRIM(PSTACK&SUBPROGNUM..LINE) ,"LBL","GTO","XEQ","lbl","gto","xeq" )
SKIP
LABELNUM = TRIM(PSTACK&SUBPROGNUM..LINE)
SKIP -1
REPLACE PSTACK&SUBPROGNUM..LINE WITH TRIM(PSTACK&SUBPROGNUM..LINE)+" "+LABELNUM
SKIP
DELETE
ENDIF
SKIP
ENDDO
SCAN
IF LEN(ALLTRIM(PSTACK&SUBPROGNUM..LINE))=0
DELETE
ENDIF
ENDSCAN
ENDPROC
**
* 

*
*
* xequaly.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF TYPE(MVALUE)="N" .AND. TYPE(MVALUE2)="N"
IF VAL(MVALUE)<>VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
RETURN
ENDIF
SET EXACT ON
IF MVALUE<>MVALUE2
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
SET EXACT OFF
ENDPROC
**
* 

*
*
* x_greater_y.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)<=VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* gto.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MVALUE = SUBSTR(LINE, 5, 2)
GOTO TOP
LOCATE FOR UPPER(LINE)="LBL "+MVALUE
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "LBL not found"
ENDIF
ENDPROC
**
* 

*
*
* add_return.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MRECNO = RECNO()
SELECT SUBROUTINES
APPEND BLANK
REPLACE RTNADDRESS WITH MRECNO
ENDPROC
**
* 

*
*
* rtn.prg
*
*
* 
* 
*
SELECT SUBROUTINES
GOTO BOTTOM
IF EOF()
SELECT PSTACK&SUBPROGNUM
GOTO TOP
ENDPROG = .T.
RETURN
ENDIF
MRECNO = RTNADDRESS
DELETE
SELECT PSTACK&SUBPROGNUM
GOTO MRECNO
ENDPROC
**
* 

*
*
* createline.prg
*
*
* 
* 
*
PRGSTACK = TRIM(PSTACK0.LINE)
SELECT PSTACK1
ZAP
APPEND BLANK
FOR I = 1 TO LEN(PRGSTACK)-4
IF SUBSTR(PRGSTACK, I+2, 1)=" "
APPEND BLANK
ENDIF
REPLACE PSTACK1.LINE WITH TRIM(PSTACK1.LINE)+SUBSTR(PRGSTACK, I+2, 1)
ENDFOR
GOTO TOP
DO WHILE  .NOT. EOF()
IF TRIM(PSTACK1.LINE)="LBL" .OR. TRIM(PSTACK1.LINE)="GTO"
SKIP
LABELNUM = TRIM(PSTACK1.LINE)
SKIP -1
REPLACE PSTACK1.LINE WITH TRIM(PSTACK1.LINE)+" "+LABELNUM
SKIP
DELETE
ENDIF
SKIP
ENDDO
ENDPROC
**
* 

*
*
* headlist.prg
*
*
* 
* 
*
PARAMETER LISTA
LOCAL CH
IF SUBSTR(LISTA, 1, 1)<>"{"
RETURN
ENDIF
IF SUBSTR(LISTA, 1, 2)="{ "
LISTA = "{"+SUBSTR(LISTA, 3, LEN(LISTA)-2)
ENDIF
IF TRIM(LISTA)="{}"
RETURN '"NULL"'
ENDIF
FOR CH = 1 TO LEN(LISTA)
IF SUBSTR(LISTA, CH, 1)=" "
EXIT
ENDIF
ENDFOR
IF CH=LEN(LISTA)+1
RETURN SUBSTR(LISTA, 2, LEN(LISTA)-2)
ELSE
RETURN SUBSTR(LISTA, 2, CH-2)
ENDIF
ENDFUNC
**
* 

*
*
* taillist.prg
*
*
* 
* 
*
PARAMETER LISTA
IF LEN(LISTA)=2
RETURN "{}"
ENDIF
IF SUBSTR(LISTA, 1, 2)="{ "
LISTA = "{"+SUBSTR(LISTA, 3, LEN(LISTA)-2)
ENDIF
IF SUBSTR(LISTA, LEN(LISTA)-1, 2)=" }"
LISTA = SUBSTR(LISTA, 1, LEN(LISTA)-2)+"}"
ENDIF
LOCAL CH
FOR CH = 1 TO LEN(LISTA)
IF SUBSTR(LISTA, CH, 1)=" "
EXIT
ENDIF
ENDFOR
IF CH=LEN(LISTA)+1
RETURN "{}"
ENDIF
RETURN "{"+SUBSTR(LISTA, CH+1, LEN(LISTA)-CH)
ENDFUNC
**
* 

*
*
* numbertopstack.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MVALUE = LINE
SELECT STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
ENDPROC
**
* 

*
*
* vartopstack.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MVALUE = LINE
SELECT STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
ENDPROC
**
* 

*
*
* pxequaly.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF TYPE(MVALUE)="N" .AND. TYPE(MVALUE2)="N"
IF VAL(MVALUE)<>VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
RETURN
ENDIF
SET EXACT ON
MVALUE2 = STACK
IF MVALUE<>MVALUE2
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
SET EXACT OFF
ENDPROC
**
* 

*
*
* px_greater_y.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)<=VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* pgto.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MVALUE = SUBSTR(LINE, 5, 2)
GOTO TOP
LOCATE FOR UPPER(LINE)="LBL "+MVALUE
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "LBL not found"
ENDIF
ENDPROC
**
* 

*
*
* f_eval.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF SUBSTR(STACK, 1, 1)='"'
RETURN
ENDIF
IF SUBSTR(STACK, 1, 1)="{"
ELIST()
RETURN
ENDIF
IF SUBSTR(STACK.STACK, 1, 1)="'"
RCL()
ENDIF
IF SUBSTR(STACK.STACK, 1, 2)="<<"
CREATEPSTACK()
SELECT STACK
DELETE
GOTO BOTTOM
RUNPROG()
RETURN
ENDIF
CMD = TRIM(STACK.STACK)
DELETE
SKIP -1
CMD = UPPER(CMD)
DO CASE
CASE TYPE(CMD)="N" .OR. SUBSTR(CMD, 1, 1)='"'
SELECT STACK
APPEND BLANK
REPLACE STACK WITH CMD
CASE CMD="X=Y?"
CASE CMD="X>Y?"
CASE CMD="+" .AND. LEN(CMD)=1
CALC_ADD()
CASE CMD="-" .AND. LEN(CMD)=1
CALC_MINUS()
CASE CMD="*" .OR. UPPER(CMD)="X "
CALC_MULTIPLY()
CASE CMD="/" .AND. LEN(CMD)=1
CALC_DIVISION()
CASE CMD="CHS"
CHS()
CASE CMD="CLX"
CLX()
CASE CMD="GTO"
CASE CMD="STOP" .OR. CMD="HALT"
CASE CMD="PROMPT"
F_PROMPT()
CASE CMD="RDN"
RDN()
CASE CMD="RDN3"
RDN3()
CASE CMD="ROT"
ROT()
CASE CMD="RUP" .OR. CMD="R^"
RUP()
CASE CMD="SWAP" .OR. CMD="X<>Y"
SWAP()
CASE CMD="DROP" .AND. LEN(CMD)=4
CALC_DROP()
CASE CMD="DUP" .AND. LEN(CMD)=3
DUP()
CASE CMD="ENTER"
ENTER()
CASE CMD="CLEAR" .OR. CMD="CLST"
CLSTACK()
CASE CMD="OVER"
F_OVER()
CASE CMD="PICK"
PICK()
CASE CMD="ROLLD"
ROLLD()
CASE CMD="ROLL"
F_ROLL()
CASE CMD="DEPTH"
DEPTH()
CASE CMD="DUP2"
DUP2()
CASE CMD="DUPN"
DUPN()
CASE CMD="DROP2"
DROP2()
CASE CMD="DROPN"
DROPN()
CASE CMD="STO"
STO()
CASE CMD="RCL"
RCL()
CASE CMD="IND"
IND()
CASE CMD="CLRG"
CLREG()
CASE CMD="CLVARS"
CLVARS()
CASE CMD="PURGE"
PURGE()
CASE CMD="SIZE?"
ASKMEMSIZE()
CASE CMD="MSIZE"
SETMEMSIZE()
CASE CMD="HEAD"
HLIST()
CASE CMD="TAIL"
TLIST()
CASE CMD="GET"
F_GET()
CASE CMD="PUT"
F_PUT()
CASE CMD="SUB"
SUB()
CASE CMD="SIZE"
F_SIZE()
CASE CMD="->LIST"
TOLIST()
CASE CMD="LIST->"
FROMLIST()
CASE CMD="LISTCH"
LISTCHARS()
CASE CMD="ASSIGN"
TOBUTTON()
CASE CMD="CLBUTT"
CLBUTT()
CASE CMD="SQRT" .OR. CMD="V^"
F_SQRT()
CASE CMD="SQ" .OR. CMD="X^2"
F_X2()
CASE CMD="LN"
F_LN()
CASE CMD="LOG"
F_LOG()
CASE CMD="E^X" .OR. CMD="EXP"
F_ERAISEDTOX()
CASE CMD="10^X" .OR. CMD="ALOG"
F_10RAISEDTOX()
CASE CMD="Y^X" .OR. CMD="^"
F_YRAISEDTOX()
CASE CMD="Y^1/X" .OR. CMD="XROOT"
F_ROOTXOFY()
CASE CMD="1/X" .OR. CMD="INV"
F_1DIVX()
CASE CMD="SIN"
F_SIN()
CASE CMD="COS"
F_COS()
CASE CMD="TAN"
F_TAN()
CASE CMD="PI"
F_PI()
CASE CMD="ASIN"
F_ASIN()
CASE CMD="ACOS"
F_ACOS()
CASE CMD="ATAN"
F_ATAN()
CASE CMD="INT"
F_INT()
CASE CMD="FRC"
F_FRC()
CASE CMD="FACT" .OR. CMD="!"
F_FACT()
CASE CMD="IP"
F_IP()
CASE CMD="FP"
F_FP()
CASE CMD=">="
L2_GREATER_OR_EQUAL_L1()
CASE CMD=">"
L2_GREATER_L1()
CASE CMD="=="
L2_EQUAL_L1()
CASE CMD="#"
L2_DIFFERENT_L1()
CASE CMD="<" .AND. LEN(TRIM(CMD))=1
L2_LESS_L1()
CASE CMD="<="
L2_LESS_OR_EQUAL_L1()
CASE CMD="IFTE"
IFTE()
CASE CMD="IFT"
IFT()
CASE CMD="AND"
F_AND()
CASE CMD="OR"
F_OR()
CASE CMD="XOR"
F_XOR()
CASE CMD="NOT"
F_NOT()
CASE CMD="FIX"
FIX()
CASE CMD="DEG"
DEG()
CASE CMD="RAD"
RAD()
CASE CMD="GRAD"
GRAD()
ENDCASE
ENDPROC
**
* 

*
*
* xequal0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF VAL(STACK)<>0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* x_greater_0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)<=0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* rdn.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NSTACK
IF NSTACK<4
DISPLAYX = "Error: stack levels < 4"
RETURN
ENDIF
GOTO BOTTOM
LEVEL_X = STACK
SKIP -1
LEVEL_Y = STACK
SKIP -1
LEVEL_Z = STACK
SKIP -1
LEVEL_T = STACK
REPLACE STACK WITH LEVEL_X
SKIP
REPLACE STACK WITH LEVEL_T
SKIP
REPLACE STACK WITH LEVEL_Z
SKIP
REPLACE STACK WITH LEVEL_Y
ENDPROC
**
* 

*
*
* rdn3.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NSTACK
IF NSTACK<3
DISPLAYX = "Error: stack levels < 3"
RETURN
ENDIF
GOTO BOTTOM
LEVEL_X = STACK
SKIP -1
LEVEL_Y = STACK
SKIP -1
LEVEL_Z = STACK
REPLACE STACK WITH LEVEL_X
SKIP
REPLACE STACK WITH LEVEL_Z
SKIP
REPLACE STACK WITH LEVEL_Y
ENDPROC
**
* 

*
*
* config.fpw
*
*
*
* rot.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NSTACK
IF NSTACK<3
DISPLAYX = "Error: stack levels < 3"
RETURN
ENDIF
GOTO BOTTOM
LEVEL_X = STACK
SKIP -1
LEVEL_Y = STACK
SKIP -1
LEVEL_Z = STACK
REPLACE STACK WITH LEVEL_Y
SKIP
REPLACE STACK WITH LEVEL_X
SKIP
REPLACE STACK WITH LEVEL_Z
ENDPROC
**
* 

*
*
* rup.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NSTACK
IF NSTACK<3
DISPLAYX = "Error: stack levels < 4"
RETURN
ENDIF
GOTO BOTTOM
LEVEL_X = STACK
SKIP -1
LEVEL_Y = STACK
SKIP -1
LEVEL_Z = STACK
SKIP -1
LEVEL_T = STACK
REPLACE STACK WITH LEVEL_Z
SKIP
REPLACE STACK WITH LEVEL_Y
SKIP
REPLACE STACK WITH LEVEL_X
SKIP
REPLACE STACK WITH LEVEL_T
ENDPROC
**
* 

*
*
* assignbutton.prg
*
*
* 
* 
*
SELECT STACK
APPEND BLANK
REPLACE STACK.STACK WITH "'"+EXEVAR
RCL()
IF SUBSTR(STACK.STACK, 1, 2)="<<"
CREATEPSTACK()
SELECT STACK
DELETE
GOTO BOTTOM
RUNPROG()
ENDIF
ENDPROC
**
* 

*
*
* f_get.prg
*
*
* 
* 
*
LOCAL ST
SELECT STACK
GOTO BOTTOM
NUMOBJ = VAL(STACK.STACK)
DELETE
SKIP -1
IF SUBSTR(STACK, 1, 1)='"'
REPLACE STACK WITH '"'+SUBSTR(STACK, NUMOBJ+1, 1)+'"'
RETURN
ENDIF
REPLACE STACK WITH SINGLESPACE(STACK)
ST = TRIM(STACK)
IF SUBSTR(ST, 1, 2)="{ "
ST = "{"+SUBSTR(ST, 3, LEN(ST)-2)
ENDIF
DO CASE
CASE NUMOBJ=1
FIRSTSPACE = AT(" ", ST)
IF FIRSTSPACE=0
REPLACE STACK WITH SUBSTR(ST, 2, LEN(ST)-2)
ELSE
REPLACE STACK WITH SUBSTR(ST, 2, FIRSTSPACE-2)
ENDIF
CASE AT(" ", ST, NUMOBJ)=0
NSPACE = AT(" ", ST, NUMOBJ-1)
REPLACE STACK WITH SUBSTR(ST, NSPACE+1, LEN(ST-NSPACE-1))
CASE NUMOBJ>1
NSPACE = AT(" ", ST, NUMOBJ-1)
NSPACE2 = AT(" ", ST, NUMOBJ)
REPLACE STACK WITH SUBSTR(ST, NSPACE+1, NSPACE2-1-(NSPACE))
ENDCASE
ENDPROC
**
* 

*
*
* f_put.prg
*
*
* 
* 
*
LOCAL ST
SELECT STACK
GOTO BOTTOM
NEWVALUE = TRIM(STACK.STACK)
DELETE
SKIP -1
NUMOBJ = VAL(STACK.STACK)
DELETE
SKIP -1
REPLACE STACK WITH SINGLESPACE(STACK)
ST = TRIM(STACK)
IF SUBSTR(STACK, 1, 1)='"'
REPLACE STACK WITH SUBSTR(ST, 1, NUMOBJ)+SUBSTR(NEWVALUE, 2, LEN(NEWVALUE)-2)+SUBSTR(ST, NUMOBJ+2, LEN(ST)-NUMOBJ-1)
RETURN
ENDIF
IF SUBSTR(ST, 1, 2)="{ "
ST = "{"+SUBSTR(ST, 3, LEN(ST)-2)
ENDIF
IF SUBSTR(ST, LEN(ST)-1, 2)=" }"
ST = SUBSTR(ST, 1, LEN(ST)-2)+"}"
ENDIF
DO CASE
CASE NUMOBJ=1
FIRSTSPACE = AT(" ", ST)
IF FIRSTSPACE=0
REPLACE STACK WITH "{"+NEWVALUE+"}"
ELSE
ST2 = "{"+NEWVALUE+SUBSTR(ST, FIRSTSPACE, LEN(ST)-FIRSTSPACE+1)
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ENDIF
CASE AT(" ", ST, NUMOBJ)=0
NSPACE = AT(" ", ST, NUMOBJ-1)
ST2 = SUBSTR(ST, 1, NSPACE)+NEWVALUE+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
CASE NUMOBJ>1
NSPACE = AT(" ", ST, NUMOBJ-1)
NSPACE2 = AT(" ", ST, NUMOBJ)
ST2 = SUBSTR(ST, 1, NSPACE)+NEWVALUE+SUBSTR(ST, NSPACE2, LEN(ST)-NSPACE2+1)
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ENDCASE
ENDPROC
**
* 

*
*
* f_size.prg
*
*
* 
* 
*
LOCAL I, ST
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH SINGLESPACE(STACK)
ST = TRIM(STACK)
IF SUBSTR(ST, 1, 1)='"'
REPLACE STACK WITH ALLTRIM(STR(LEN(ST)-2))
RETURN
ENDIF
IF TRIM(ST)="{}" .OR. TRIM(ST)="{ }"
REPLACE STACK WITH "0"
RETURN
ENDIF
IF SUBSTR(ST, 1, 2)="{ "
ST = "{"+SUBSTR(ST, 3, LEN(ST)-2)
ENDIF
IF SUBSTR(ST, LEN(ST)-1, 2)=" }"
ST = SUBSTR(ST, 1, LEN(ST)-2)+"}"
ENDIF
NSPACES = 0
FOR I = 1 TO LEN(ST)
IF SUBSTR(ST, I, 1)=" "
NSPACES = NSPACES+1
ENDIF
ENDFOR
REPLACE STACK WITH ALLTRIM(STR(NSPACES+1, 9, 0))
ENDPROC
**
* 

*
*
* pfor.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
MVALUE = SUBSTR(LINE, 5, 2)
GOTO TOP
LOCATE FOR LINE="FOR"
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "FOR not found"
ENDIF
ENDPROC
**
* 

*
*
* pstart.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
STARTMAX = VAL(STACK)
DELETE
SKIP -1
STARTNOW = VAL(STACK)
DELETE
SKIP -1
SELECT PSTACK&SUBPROGNUM
ENDPROC
**
* 

*
*
* pnext.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
STARTNOW = STARTNOW+1
IF STARTNOW>STARTMAX
RETURN
ENDIF
DO WHILE TRIM(UPPER(LINE))<>"START"
SKIP -1
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "START not found"
ENDIF
ENDPROC
**
* 

*
*
* pstep.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
STARTSTEP = VAL(STACK)
DELETE
SKIP -1
SELECT PSTACK&SUBPROGNUM
STARTNOW = STARTNOW+STARTSTEP
IF STARTNOW>STARTMAX
RETURN
ENDIF
DO WHILE UPPER(LINE)<>"START"
SKIP -1
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "START not found"
ENDIF
ENDPROC
**
* 

*
*
* tolist.prg
*
*
* 
* 
*
LOCAL I
SELECT STACK
GOTO BOTTOM
IF TYPE(STACK)<>"N"
DISPLAYX = "Error"
RETURN
ENDIF
LEVELS = VAL(STACK)
IF LEVELS=0
REPLACE STACK WITH "{}"
RETURN
ENDIF
DELETE
MYLIST = "{"
SKIP -LEVELS
FOR I = 1 TO LEVELS
MYLIST = MYLIST+TRIM(STACK)+" "
DELETE
SKIP
ENDFOR
APPEND BLANK
ST2 = SUBSTR(MYLIST, 1, LEN(MYLIST)-1)+"}"
IF LEN(ST2)>254
DISPLAYX = "List too large to fit in level x"
RETURN
ENDIF
REPLACE STACK WITH ST2
ENDPROC
**
* 

*
*
* f_over.prg
*
*
* 
* 
*
SELECT STACK
SKIP -1
LEVELY = STACK
APPEND BLANK
REPLACE STACK WITH LEVELY
CALC.REFRESH
ENDPROC
**
* 

*
*
* l2_greater_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF VAL(LEVEL2)>VAL(LEVEL1)
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* while_exit.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"ENDWHILE"
IF UPPER(LINE)="END"
EXIT
ENDIF
SKIP
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "ENDWHILE not found"
ENDIF
ENDPROC
**
* 

*
*
* while_end.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"WHILE"
SKIP -1
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "WHILE not found"
ENDIF
ENDPROC
**
* 

*
*
* while_loop.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"WHILE"
SKIP -1
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "WHILE not found"
ENDIF
ENDPROC
**
* 

*
*
* while_repeat.prg
*
*
* 
* 
*
SELECT STACK
IF VAL(STACK)=0
DELETE
SKIP -1
WHILE_EXIT()
ELSE
DELETE
SKIP -1
ENDIF
ENDPROC
**
* 

*
*
* if_then.prg
*
*
* 
* 
*
SELECT STACK
LEVELX = STACK
DELETE
SKIP -1
SELECT PSTACK&SUBPROGNUM
IF INCASE
IF VAL(LEVELX)=0
DO WHILE ALLTRIM(UPPER(LINE))<>"END"
SKIP
ENDDO
SKIP -1
RETURN
ELSE
OPTIONFOUND = .T.
RETURN
ENDIF
ENDIF
PRESREC = RECNO()
IF VAL(LEVELX)=0
DO WHILE .T.
IF ALLTRIM(UPPER(LINE))="ELSE"
INIF = .F.
EXIT
ENDIF
IF ALLTRIM(UPPER(LINE))="ENDIF"
INIF = .F.
EXIT
ENDIF
IF UPPER(LINE)="END"
INIF = .F.
EXIT
ENDIF
SKIP
ENDDO
IF EOF()
WAIT WINDOW AT 1, 1 "ENDIF not found"
ENDIF
ELSE
IFTRUE = .T.
ENDIF
ENDPROC
**
* 

*
*
* end_do.prg
*
*
* 
* 
*
SELECT STACK
LEVELX = STACK
DELETE
SKIP -1
SELECT PSTACK&SUBPROGNUM
IF VAL(LEVELX)=0
DO WHILE UPPER(LINE)<>"DO"
SKIP -1
ENDDO
IF EOF()
WAIT WINDOW AT 1, 1 "DO not found"
ENDIF
ELSE
INDO = .F.
ENDIF
ENDPROC
**
* 

*
*
* case_end.prg
*
*
* 
* 
*
IF OPTIONFOUND
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"ENDCASE"
SKIP
ENDDO
ENDIF
ENDPROC
**
* 

*
*
* manualpick.prg
*
*
* 
* 
*
SELECT STACK
STACK_TMP = STACK.STACK
APPEND BLANK
REPLACE STACK.STACK WITH STACK_TMP
ENDPROC
**
* 

*
*
* ift.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SKIP -1
IF VAL(STACK)<>0
DELETE
SKIP
F_EVAL()
ELSE
DELETE
SKIP
DELETE
GOTO BOTTOM
ENDIF
ENDPROC
**
* 

*
*
* sub.prg
*
*
* 
* 
*
LOCAL SUBINIT, SUBEND
SELECT STACK
GOTO BOTTOM
SUBEND = VAL(STACK)
DELETE
SKIP -1
SUBINI = VAL(STACK)
DELETE
SKIP -1
REPLACE STACK WITH SINGLESPACE(STACK)
ST = TRIM(STACK)
IF SUBSTR(ST, 1, 2)="{ "
ST = "{"+SUBSTR(ST, 3, LEN(ST)-2)
ENDIF
IF SUBSTR(ST, LEN(ST)-1, 2)=" }"
ST = SUBSTR(ST, 1, LEN(ST)-2)+"}"
ENDIF
IF SUBSTR(ST, 1, 1)="{"
IF SUBINI>1
INITBLANK = AT(" ", ST, SUBINI-1)
ENDIF
ENDBLANK = AT(" ", ST, SUBEND)
DO CASE
CASE SUBINI=1 .AND. ENDBLANK=0
CASE SUBINI=1
REPLACE STACK WITH SUBSTR(ST, 1, ENDBLANK-1)+"}"
CASE ENDBLANK=0
REPLACE STACK WITH '{'+SUBSTR(ST, INITBLANK+1, LEN(ST)-INITBLANK)
OTHERWISE
REPLACE STACK WITH '{'+SUBSTR(ST, INITBLANK+1, ENDBLANK-1-INITBLANK)+"}"
ENDCASE
ELSE
REPLACE STACK WITH '"'+SUBSTR(ST, SUBINI+1, SUBEND-SUBINI+1)+'"'
ENDIF
ENDPROC
**
* 

*
*
* fromlist.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH SINGLESPACE(STACK)
MYLIST = TRIM(STACK)
DELETE
APPEND BLANK
IF MYLIST="{}"
REPLACE STACK WITH "0"
RETURN
ENDIF
IF AT(" ", MYLIST)=0
REPLACE STACK WITH SUBSTR(MYLIST, 2, LEN(MYLIST)-2)
APPEND BLANK
REPLACE STACK WITH "1"
RETURN
ENDIF
IF SUBSTR(MYLIST, 1, 2)="{ "
MYLIST = "{"+SUBSTR(MYLIST, 3, LEN(MYLIST)-2)
ENDIF
IF SUBSTR(MYLIST, LEN(MYLIST)-1, 2)=" }"
MYLIST = SUBSTR(MYLIST, 1, LEN(MYLIST)-2)+"}"
ENDIF
REPLACE STACK WITH SUBSTR(MYLIST, 2, AT(" ", MYLIST)-2)
N = 1
DO WHILE AT(" ", MYLIST, N+1)>0
APPEND BLANK
REPLACE STACK WITH SUBSTR(MYLIST, AT(" ", MYLIST, N)+1, AT(" ", MYLIST, N+1)-AT(" ", MYLIST, N))
N = N+1
ENDDO
APPEND BLANK
REPLACE STACK WITH SUBSTR(MYLIST, AT(" ", MYLIST, N)+1, LEN(MYLIST)-1-AT(" ", MYLIST, N))
APPEND BLANK
REPLACE STACK WITH ALLTRIM(STR(N+1))
ENDPROC
**
* 

*
*
* listchars.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH ALLTRIM(STR(LEN(TRIM(STACK))))
CALC.REFRESH
ENDPROC
**
* 

*
*
* f_prompt.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVELX = TRIM(STACK)
IF SUBSTR(LEVELX, 1, 1)='"'
LEVELX = SUBSTR(LEVELX, 2, LEN(LEVELX)-2)
ENDIF
DELETE
SKIP -1
DISPLAYX = LEVELX
INDATAENTRY = .F.
CALC.REFRESH
ENDPROC
**
* 

*
*
* f_and.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVELX = STACK
DELETE
SKIP -1
LEVELY = STACK
IF VAL(LEVELX)=0 .OR. VAL(LEVELY)=0
REPLACE STACK WITH "0"
ELSE
REPLACE STACK WITH "1"
ENDIF
ENDPROC
**
* 

*
*
* f_or.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVELX = STACK
DELETE
SKIP -1
LEVELY = STACK
IF VAL(LEVELX)<>0 .OR. VAL(LEVELY)<>0
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* l2_equal_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF TYPE(LEVEL1)="N" .AND. TYPE(LEVEL2)="N"
IF VAL(LEVEL2)=VAL(LEVEL1)
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
RETURN
ENDIF
IF LEVEL1=LEVEL2
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* f_ip.prg
*
*
* 
* 
*
F_INT()
ENDPROC
**
* 

*
*
* f_fp.prg
*
*
* 
* 
*
F_FRC()
ENDPROC
**
* 

*
*
* f_not.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF VAL(STACK)<>0
REPLACE STACK WITH "0"
ELSE
REPLACE STACK WITH "1"
ENDIF
ENDPROC
**
* 

*
*
* f_int.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH ALLTRIM(STR(INT(VAL(STACK))))
ENDPROC
**
* 

*
*
* f_frc.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH ALLTRIM(STR(VAL(STACK)-INT(VAL(STACK)), 21, NUMDEC))
ENDPROC
**
* 

*
*
* f_fact.prg
*
*
* 
* 
*
LOCAL N, NFACT
SELECT STACK
GOTO BOTTOM
N = VAL(STACK)
NFACT = 1
FOR I = 1 TO N
NFACT = NFACT*I
ENDFOR
REPLACE STACK WITH ALLTRIM(STR(NFACT))
ENDPROC
**
* 

*
*
* l2_less_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF VAL(LEVEL2)<VAL(LEVEL1)
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* l2_less_or_equal_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF VAL(LEVEL2)<=VAL(LEVEL1)
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* l2_greater_or_equal_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF VAL(LEVEL2)>=VAL(LEVEL1)
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* l2_different_l1.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVEL1 = STACK
DELETE
SKIP -1
LEVEL2 = STACK
IF TYPE(LEVEL1)="N" .AND. TYPE(LEVEL2)="N"
IF VAL(LEVEL2)=VAL(LEVEL1)
REPLACE STACK WITH "0"
ELSE
REPLACE STACK WITH "1"
ENDIF
RETURN
ENDIF
IF LEVEL1=LEVEL2
REPLACE STACK WITH "0"
ELSE
REPLACE STACK WITH "1"
ENDIF
ENDPROC
**
* 

*
*
* f_xor.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
LEVELX = STACK
DELETE
SKIP -1
LEVELY = STACK
IF VAL(LEVELX)<>0 .AND. VAL(LEVELY)<>0
REPLACE STACK WITH "0"
RETURN
ENDIF
IF VAL(LEVELX)<>0 .OR. VAL(LEVELY)<>0
REPLACE STACK WITH "1"
ELSE
REPLACE STACK WITH "0"
ENDIF
ENDPROC
**
* 

*
*
* f_inv.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
REPLACE STACK WITH ALLTRIM(STR(1/(VAL(STACK),20,NUMDEC)))
ENDPROC
**
* 

*
*
* f_exp.prg
*
*
* 
* 
*
F_ERAISEDTOX()
ENDPROC
**
* 

*
*
* fill_step.prg
*
*
* 
* 
*
LOCAL I
SELECT PSTACK0
I = 1
SCAN
REPLACE STEP WITH I
I = I+1
ENDSCAN
ENDPROC
**
* 

*
*
* savevars.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT MEMVARS
COPY TO &PNAME..VAR DELIMITED WITH \ WITH CHARACTER ' '
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* loadvars.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT MEMVARS
ZAP
APPEND FROM &PNAME..VAR DELIMITED WITH \ WITH CHARACTER ' '
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* for_start.prg
*
*
* 
* 
*
SELECT PSTACK&SUBPROGNUM
SKIP
VAR_FOR = TRIM(LINE)
SELECT STACK
GOTO BOTTOM
FOR_MAX = VAL(STACK)
DELETE
SKIP -1
FOR_NOW = VAL(STACK)
DELETE
SKIP -1
SELECT MEMVARS
LOCATE FOR MEMNAME=VAR_FOR
IF EOF()
APPEND BLANK
REPLACE MEMNAME WITH VAR_FOR
ENDIF
REPLACE MEM WITH ALLTRIM(STR(FOR_NOW))
SELECT PSTACK&SUBPROGNUM
ENDPROC
**
* 

*
*
* end_for.prg
*
*
* 
* 
*
SELECT MEMVARS
LOCATE FOR MEMNAME=VAR_FOR
FOR_NOW = VAL(MEM)+1
REPLACE MEM WITH ALLTRIM(STR(FOR_NOW))
IF FOR_NOW>FOR_MAX
DELETE
RETURN
ENDIF
SELECT PSTACK&SUBPROGNUM
DO WHILE TRIM(UPPER(LINE))<>"FOR"
SKIP -1
ENDDO
IF  .NOT. EOF()
SKIP
ELSE
WAIT WINDOW AT 1, 1 "FOR not found"
ENDIF
ENDPROC
**
* 

*
*
* for_step.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
FORSTEP = VAL(STACK)
DELETE
SKIP -1
SELECT MEMVARS
LOCATE FOR MEMNAME=VAR_FOR
FOR_NOW = VAL(MEM)+FORSTEP
REPLACE MEM WITH ALLTRIM(STR(FOR_NOW))
IF FOR_NOW>FOR_MAX
DELETE
RETURN
ENDIF
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"FOR"
SKIP -1
ENDDO
IF  .NOT. EOF()
SKIP
ELSE
WAIT WINDOW AT 1, 1 "FOR not found"
ENDIF
ENDPROC
**
* 

*
*
* stacktovars.prg
*
*
* 
* 
*
LOCAL I, J
SELECT PSTACK&SUBPROGNUM
PRESREC = RECNO()
I = 0
SKIP
DO WHILE LINE<>";"
IF LINE="<<"
EXIT
ENDIF
I = I+1
SKIP
ENDDO
GOTO (PRESREC)
SKIP
SELECT STACK
GOTO BOTTOM
SKIP -I+1
FOR J = 1 TO I
SELECT PSTACK&SUBPROGNUM
VAR_I = TRIM(LINE)
SKIP
SELECT STACK
VAR_VALUE = STACK
DELETE
SKIP
SELECT MEMVARS
LOCATE FOR MEMNAME=VAR_I
IF EOF()
APPEND BLANK
ENDIF
REPLACE MEMNAME WITH VAR_I
REPLACE MEM WITH VAR_VALUE
ENDFOR
SELECT STACK
GOTO BOTTOM
SELECT PSTACK&SUBPROGNUM
ENDPROC
**
* 

*
*
* singlespace.prg
*
*
* 
* 
*
PARAMETER MLIST
LOCAL MLIST2, I, FIRSTSPACE
MLIST = TRIM(MLIST)
MLIST2 = ""
FIRSTSPACE = .F.
FOR I = 1 TO LEN(MLIST)
IF FIRSTSPACE .AND. SUBSTR(MLIST, I, 1)=" "
ELSE
MLIST2 = MLIST2+SUBSTR(MLIST, I, 1)
ENDIF
IF SUBSTR(MLIST, I, 1)=" " .AND.  .NOT. FIRSTSPACE
FIRSTSPACE = .T.
ENDIF
IF SUBSTR(MLIST, I, 1)<>" "
FIRSTSPACE = .F.
ENDIF
ENDFOR
RETURN MLIST2
ENDFUNC
**
* 

*
*
* xdiff0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF VAL(STACK)=0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* xdiffy.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF TYPE(MVALUE)="N" .AND. TYPE(MVALUE2)="N"
IF VAL(MVALUE)=VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
RETURN
ENDIF
SET EXACT ON
IF MVALUE=MVALUE2
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
SET EXACT OFF
ENDPROC
**
* 

*
*
* x_minor_0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)>=0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* x_minor_y.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)>=VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* xroot.prg
*
*
* 
* 
*
F_ROOTXOFY()
ENDPROC
**
* 

*
*
* x_minorequal_0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)>0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* x_minorequal_y.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)>VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* x_majorequal_0.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)<0
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* x_majorequal_y.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
MVALUE = STACK
SKIP -1
MVALUE2 = STACK
IF VAL(MVALUE)<VAL(MVALUE2)
SELECT PSTACK&SUBPROGNUM
SKIP
ENDIF
ENDPROC
**
* 

*
*
* fdimage32.bmp
*
*
*
* about.prg
*
*
* 
* 
*
MESSAGEBOX("Written by Alvaro Gerardo Suarez"+CHR(13)+CHR(10)+"http://sim41.webcindario.com", 0, "Version 1.0")
ENDPROC
**
* 

*
*
* ifte.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SKIP -2
IF VAL(STACK)<>0
DELETE
GOTO BOTTOM
DELETE
SKIP -1
F_EVAL()
ELSE
DELETE
SKIP
DELETE
SKIP
F_EVAL()
ENDIF
ENDPROC
**
* 

*
*
* elist.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))=2
RETURN
ENDIF
IF SUBSTR(STACK, 1, 1)='"' .AND. LEN(TRIM(STACK))>2
RETURN
ENDIF
REPLACE STACK WITH SINGLESPACE(STACK)
REPLACE STACK.STACK WITH ENDLIST(TRIM(STACK.STACK))
ENDPROC
**
* 

*
*
* endlist.prg
*
*
* 
* 
*
PARAMETER LISTA
LOCAL CH
IF SUBSTR(LISTA, 1, 1)<>"{"
RETURN
ENDIF
IF SUBSTR(LISTA, 1, 2)="{ "
LISTA = "{"+SUBSTR(LISTA, 3, LEN(LISTA)-2)
ENDIF
IF SUBSTR(LISTA, LEN(LISTA)-1, 2)=" }"
LISTA = SUBSTR(LISTA, 1, LEN(LISTA)-2)+"}"
ENDIF
IF TRIM(LISTA)="{}"
RETURN '"NULL"'
ENDIF
FOR CH = 1 TO LEN(LISTA)
IF SUBSTR(LISTA, LEN(LISTA)-CH+1, 1)=" "
EXIT
ENDIF
ENDFOR
IF CH=LEN(LISTA)+1
RETURN SUBSTR(LISTA, 2, LEN(LISTA)-2)
ELSE
RETURN SUBSTR(LISTA, LEN(LISTA)-CH+2, CH-2)
ENDIF
ENDFUNC
**
* 

*
*
* deg.prg
*
*
* 
* 
*
FACTOR = PI()/180
DEG = .T.
RAD = .F.
GRAD = .F.
ENDPROC
**
* 

*
*
* rad.prg
*
*
* 
* 
*
FACTOR = 1
DEG = .F.
RAD = .T.
GRAD = .F.
ENDPROC
**
* 

*
*
* grad.prg
*
*
* 
* 
*
FACTOR = PI()/200
DEG = .F.
RAD = .F.
GRAD = .T.
ENDPROC
**
* 

*
*
* askmemsize.prg
*
*
* 
* 
*
SELECT MEM
COUNT TO MEMSIZE
SELECT STACK
APPEND BLANK
REPLACE STACK.STACK WITH ALLTRIM(STR(MEMSIZE))
ENDPROC
**
* 

*
*
* setmemsize.prg
*
*
* 
* 
*
SELECT STACK
MEMSIZE = VAL(STACK.STACK)
DELETE
SELECT MEM
ZAP
FOR I = 1 TO MEMSIZE
APPEND BLANK
REPLACE MEMNUMBER WITH I-1
ENDFOR
ENDPROC
**
* 

*
*
* savebutt.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT CALCBUTTONS
COPY TO &PNAME..BT FIELDS NAME TYPE SDF
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* loadbutt.prg
*
*
* 
* 
*
PNAME = TRIM(STACK.STACK)
IF SUBSTR(PNAME, 1, 1)="'"
PNAME = SUBSTR(PNAME, 2, LEN(PNAME)-2)
ENDIF
SELECT CALCBUTTONS
IF FILE("&pname..bt")
ZAP
APPEND FROM &PNAME..BT FIELDS NAME SDF
REPLACE NUMBER WITH RECNO() ALL
ENDIF
SELECT CALCBUTTONS
COUNT TO NBUTTONS
GOTO TOP
FOR I = 1 TO NBUTTONS
IF I>9
CHARI = STR(I, 2, 0)
ELSE
CHARI = STR(I, 1, 0)
ENDIF
CALC.BUTTON&CHARI..CAPTION=TRIM(CALCBUTTONS.NAME)
SKIP
ENDFOR
IF NBUTTONS<MAXBUTTONS
FOR I = 1 TO MAXBUTTONS-NBUTTONS
APPEND BLANK
REPLACE NUMBER WITH RECNO()
ENDFOR
ENDIF
SELECT STACK
DELETE
SKIP -1
ENDPROC
**
* 

*
*
* clbutt.prg
*
*
* 
* 
*
SELECT CALCBUTTONS
COUNT TO NBUTTONS
GOTO TOP
FOR I = 1 TO NBUTTONS
IF I>9
CHARI = STR(I, 2, 0)
ELSE
CHARI = STR(I, 1, 0)
ENDIF
CALC.BUTTON&CHARI..CAPTION=""
SKIP
ENDFOR
REPLACE NAME WITH "" ALL
IF NBUTTONS<MAXBUTTONS
FOR I = 1 TO MAXBUTTONS-NBUTTONS
APPEND BLANK
REPLACE NUMBER WITH RECNO()
ENDFOR
ENDIF
SELECT STACK
RETURN
WITH CALC
.BUTTON1.CAPTION = ""
.BUTTON2.CAPTION = ""
.BUTTON3.CAPTION = ""
.BUTTON4.CAPTION = ""
.BUTTON5.CAPTION = ""
.BUTTON6.CAPTION = ""
.BUTTON7.CAPTION = ""
.BUTTON8.CAPTION = ""
.BUTTON9.CAPTION = ""
.BUTTON10.CAPTION = ""
ENDWITH
SELECT CALCBUTTONS
REPLACE NAME WITH "" ALL
ENDPROC
**
* 

*
*
* calc5.scx
*
*
*
*  calc5.scx>Form1
**
PROCEDURE Init
PUBLIC MAXBUTTONS
MAXBUTTONS = 18
SELECT CALCBUTTONS
COUNT TO NBUTTONS
GOTO TOP
FOR I = 1 TO NBUTTONS
IF I>9
CHARI = STR(I, 2, 0)
ELSE
CHARI = STR(I, 1, 0)
ENDIF
THISFORM.BUTTON&CHARI..CAPTION=TRIM(CALCBUTTONS.NAME)
SKIP
ENDFOR
SELECT STACK
ENDPROC
**
PROCEDURE Destroy
CLEAR EVENTS
ENDPROC
**
PROCEDURE KeyPress
LPARAMETERS NKEYCODE, NSHIFTALTCTRL
RETURN
IF NKEYCODE=13
ENTER()
DISPLAYX = ""
THISFORM.REFRESH
ENDIF
ENDPROC
**
*
*  calc5.scx>Text1
**
PROCEDURE RightClick
MYFONT = GETFONT()
IF LEN(MYFONT)=0
RETURN
ENDIF
WAIT WINDOW AT 1, 1 MYFONT
THIS.FONTNAME = SUBSTR(MYFONT, 1, AT(",", MYFONT)-1)
THIS.FONTSIZE = VAL(SUBSTR(MYFONT, AT(",", MYFONT)+1, AT(",", MYFONT, 2)-1-AT(",", MYFONT)))
THIS.REFRESH
ENDPROC
**
PROCEDURE KeyPress
LPARAMETERS NKEYCODE, NSHIFTALTCTRL
IF NKEYCODE=13
DISPLAYX = THIS.VALUE
ENTER()
DISPLAYX = ""
THISFORM.REFRESH
ENDIF
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
CALC_ADD()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
EXPONENTENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
IF INDATAENTRY
DISPLAYX = DISPLAYX+THIS.CAPTION
ELSE
DISPLAYX = THIS.CAPTION
INDATAENTRY = .T.
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
CALC_MINUS()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
CALC_MULTIPLY()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
CALC_DIVISION()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command21
**
PROCEDURE Click
DUP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command22
**
PROCEDURE Click
CALC_DROP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command24
**
PROCEDURE Click
SWAP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
CLSTACK()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command32
**
PROCEDURE Click
F_EVAL()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
THISFORM.GRID1.VISIBLE = .F.
STACKPACK()
THISFORM.GRID1.VISIBLE = .T.
THISFORM.PAINT()
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
MANUALPICK()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
SELECT STACK
COUNT TO NLEVELS
I = 0
SCAN
REPLACE LEVEL WITH NLEVELS-I
I = I+1
ENDSCAN
BROWSE
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
RDN3()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
RDN()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
ROT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
RUP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
F_OVER()
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
PICK()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
ROLLD()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
F_ROLL()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
DEPTH()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
DROP2()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
DROPN()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
DUP2()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
DUPN()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command27
**
PROCEDURE Click
STO()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command28
**
PROCEDURE Click
RCL()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command31
**
PROCEDURE Click
IND()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command57
**
PROCEDURE Click
PURGE()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command30
**
PROCEDURE Click
CLREG()
ENDPROC
**
*
*  calc5.scx>Command36
**
PROCEDURE Click
SELECT MEMVARS
BROWSE
ENDPROC
**
*
*  calc5.scx>Command29
**
PROCEDURE Click
SELECT MEM
BROWSE
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
CLVARS()
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
SETMEMSIZE()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
ASKMEMSIZE()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
SAVEVARS()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
LOADVARS()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command30
**
PROCEDURE Click
CLP()
ENDPROC
**
*
*  calc5.scx>Command25
**
PROCEDURE Click
SUBPROGNUM = "0"
RUNPROG()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command26
**
PROCEDURE Click
SELECT PSTACK0
BROWSE
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
SELECT PSTACK0
IF BOF() .AND. EOF()
APPEND BLANK
REPLACE STEP WITH 1
THISFORM.REFRESH
RETURN
ENDIF
PRESREC = RECNO()
GOTO BOTTOM
ULTREC = RECNO()
APPEND BLANK
SKIP -1
MLINE = PSTACK0.LINE
MSTEP = STEP
SKIP
REPLACE PSTACK0.LINE WITH MLINE
REPLACE STEP WITH MSTEP+1
IF PRESREC=ULTREC
SKIP -1
REPLACE PSTACK0.LINE WITH " "
THISFORM.REFRESH
RETURN
ENDIF
FIN = .F.
DO WHILE .T.
SKIP -2
MLINE = PSTACK0.LINE
IF RECNO()=PRESREC
REPLACE PSTACK0.LINE WITH " "
FIN = .T.
ENDIF
SKIP
REPLACE PSTACK0.LINE WITH MLINE
IF FIN
SKIP -1
EXIT
ENDIF
ENDDO
GOTO (PRESREC)
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
SELECT PSTACK0
IF BOF() .AND. EOF()
RETURN
ENDIF
IF EOF()
GOTO BOTTOM
ENDIF
MSTEP = STEP
DELETE
IF MSTEP=1
PRESREG = RECNO()
SKIP
DO WHILE  .NOT. EOF()
MSTEP = STEP-1
REPLACE STEP WITH MSTEP
SKIP
ENDDO
GOTO (PRESREG)
ELSE
SKIP -1
PRESREG = RECNO()
MSTEP = STEP
SKIP
DO WHILE  .NOT. EOF()
MSTEP = STEP-1
REPLACE STEP WITH MSTEP
SKIP
ENDDO
GOTO (PRESREG)
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SELECT PSTACK0
IF  .NOT. EOF()
SKIP
IF EOF()
SKIP -1
ENDIF
ENDIF
THISFORM.GRID2.SETFOCUS()
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
SELECT PSTACK0
SKIP -1
THISFORM.GRID2.SETFOCUS()
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
LOADPROG()
FILL_STEP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
SAVEPROG()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
SELECT PSTACK0
GOTO BOTTOM
MSTEP = STEP
APPEND BLANK
REPLACE STEP WITH MSTEP+1
THISFORM.GRID2.SETFOCUS()
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
SELECT SUBROUTINES
BROWSE
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
SELECT PSTACK0
GOTO TOP
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command35
**
PROCEDURE Click
IF LEN(TRIM(THISFORM.TEXT1.VALUE))=0
THISFORM.TEXT1.VALUE = "'"
ELSE
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+"'"
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command37
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command38
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command39
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command40
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command41
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command42
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command43
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command44
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command45
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command46
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command47
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command48
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command49
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command50
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command51
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command52
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command53
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command54
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command55
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command56
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command58
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command59
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command60
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command61
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command62
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command63
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+'"'
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = '{'
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+" "
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+'}'
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command33
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+"<<"
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command34
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = TRIM(THISFORM.TEXT1.VALUE)+">>"
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
DISPLAYX = DISPLAYX+SUBSTR(THIS.CAPTION, 2, 1)
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = TRIM(THISFORM.TEXT1.VALUE)+"#"
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
DISPLAYX = DISPLAYX+THIS.CAPTION
INDATAENTRY = .T.
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = TRIM(THISFORM.TEXT1.VALUE)+"/"
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = THISFORM.TEXT1.VALUE+'^'
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
THISFORM.TEXT1.VALUE = '!'
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command20
**
PROCEDURE Click
FIX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
DEG()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
RAD()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
GRAD()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
PRGTOSTK()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
IF SUBSTR(STACK.STACK, 1, 2)="<<"
REPLACE STACK.STACK WITH "{"+SUBSTR(STACK.STACK, 3, LEN(TRIM(STACK.STACK))-4)+"}"
ENDIF
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
SELECT TRACE
BROWSE
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SELECT TRACE
ZAP
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
FREEFORMAT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
F_SIN()
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
F_ASIN()
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
F_PI()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
F_X2()
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
F_SQRT()
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
F_1DIVX()
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
F_COS()
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
F_TAN()
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
F_ACOS()
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
F_ATAN()
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
F_YRAISEDTOX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
F_ROOTXOFY()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
F_LN()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
F_ERAISEDTOX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
F_LOG()
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
F_10RAISEDTOX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
F_INT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
F_FRC()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
F_FACT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command23
**
PROCEDURE Click
CLX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
HLIST()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
TLIST()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
F_GET()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
F_PUT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
F_SIZE()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SUB()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
TOLIST()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
FROMLIST()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
LISTCHARS()
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
L2_GREATER_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
L2_EQUAL_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
L2_LESS_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
L2_LESS_OR_EQUAL_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
L2_GREATER_OR_EQUAL_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
L2_DIFFERENT_L1()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
F_AND()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
F_OR()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
F_NOT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
F_XOR()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
F_IP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
F_FP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
F_FACT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command20
**
PROCEDURE Click
F_YRAISEDTOX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command21
**
PROCEDURE Click
F_INV()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command22
**
PROCEDURE Click
F_X2()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command23
**
PROCEDURE Click
F_SQRT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command24
**
PROCEDURE Click
F_EXP()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
F_10RAISEDTOX()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
XROOT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "LBL "+STACK.STACK
SELECT STACK
DELETE
SKIP -1
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "GTO "+STACK.STACK
SELECT STACK
DELETE
SKIP -1
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "HALT"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "NOP"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "XEQ "+STACK.STACK
SELECT STACK
DELETE
SKIP -1
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X=Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X>Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X=0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X>0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X>=Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X>=0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X<=Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X<=0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X<Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X<0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X#Y?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "X#0?"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "RTN"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "STOP"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command20
**
PROCEDURE Click
F_PROMPT()
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "THEN"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "IF"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ELSE"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ENDIF"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command19
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "END"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command20
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "CASE"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command21
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ENDCASE"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command22
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "THEN"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command23
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "END"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command24
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "THEN"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
IFT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
IFTE()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command3
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "STEPFOR"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command4
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "FOR"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ENDFOR"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command10
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "LOOP"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "WHILE"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command12
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "EXIT"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command13
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ENDWHILE"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command14
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "REPEAT"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command15
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "UNTIL"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "DO"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command18
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "ENDDO"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "STEP"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command2
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "START"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "NEXT"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command6
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "START"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command7
**
PROCEDURE Click
SELECT PSTACK0
REPLACE PSTACK0.LINE WITH "FOR"
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command5
**
PROCEDURE Click
TOBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command8
**
PROCEDURE Click
CLBUTT()
RETURN
SELECT CALCBUTTONS
GOTO TOP
FOR I = 1 TO 18
IF I>9
CHARI = STR(I, 2, 0)
ELSE
CHARI = STR(I, 1, 0)
ENDIF
THISFORM.BUTTON&CHARI..CAPTION=""
SKIP
ENDFOR
REPLACE NAME WITH "" ALL
SELECT STACK
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command9
**
PROCEDURE Click
SELECT CALCBUTTONS
BROWSE
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command11
**
PROCEDURE Click
SAVEBUTT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command1
**
PROCEDURE Click
LOADBUTT()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command17
**
PROCEDURE Click
CHS()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command16
**
PROCEDURE Click
DISPLAYX = ""
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button7
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button9
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button11
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button13
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button15
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command20
**
PROCEDURE Click
SELECT PSTACK1
BROWSE
ENDPROC
**
*
*  calc5.scx>Command21
**
PROCEDURE Click
SELECT PSTACK2
BROWSE
ENDPROC
**
*
*  calc5.scx>Command22
**
PROCEDURE Click
SELECT PSTACK3
BROWSE
ENDPROC
**
*
*  calc5.scx>Command23
**
PROCEDURE Click
SELECT PSTACK4
BROWSE
ENDPROC
**
*
*  calc5.scx>Command24
**
PROCEDURE Click
THISFORM.WIDTH = 452
ENDPROC
**
*
*  calc5.scx>Command25
**
PROCEDURE Click
FILL_STEP()
THISFORM.WIDTH = 840
ENDPROC
**
*
*  calc5.scx>button8
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button10
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button12
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button14
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button16
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Command26
**
PROCEDURE Click
SELECT PSTACK5
BROWSE
ENDPROC
**
*
*  calc5.scx>Command27
**
PROCEDURE Click
SELECT PSTACK6
BROWSE
ENDPROC
**
*
*  calc5.scx>Command28
**
PROCEDURE Click
SELECT PSTACK7
BROWSE
ENDPROC
**
*
*  calc5.scx>Command29
**
PROCEDURE Click
SELECT PSTACK8
BROWSE
ENDPROC
**
*
*  calc5.scx>Command30
**
PROCEDURE Click
SELECT PSTACK9
BROWSE
ENDPROC
**
*
*  calc5.scx>Command31
**
PROCEDURE Click
IF THISFORM.EDIT1.VISIBLE
THISFORM.EDIT1.VISIBLE = .F.
ELSE
THISFORM.EDIT1.VISIBLE = .T.
ENDIF
ENDPROC
**
*
*  calc5.scx>Command32
**
PROCEDURE Click
ABOUT()
ENDPROC
**
*
*  calc5.scx>Command33
**
PROCEDURE Click
ABOUT()
ENDPROC
**
*
*  calc5.scx>button1
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button2
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button3
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button4
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button5
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button6
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button17
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>button18
**
PROCEDURE Click
EXEVAR = ALLTRIM(THIS.CAPTION)
IF LEN(TRIM(EXEVAR))=0
RETURN
ENDIF
ASSIGNBUTTON()
THISFORM.REFRESH
ENDPROC
**
*
*  calc5.scx>Label1
**
PROCEDURE Click
ENTER()
DISPLAYX = ""
THISFORM.REFRESH
ENDPROC
**
PROCEDURE MouseDown
LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
THIS.BACKCOLOR = RGB(255, 255, 255)
ENDPROC
**
PROCEDURE MouseUp
LPARAMETERS NBUTTON, NSHIFT, NXCOORD, NYCOORD
THIS.BACKCOLOR = RGB(192, 192, 192)
ENDPROC
**
*
* calc5.sct
*
*
*
* else_if.prg
*
*
* 
* 
*
IF IFTRUE
DO WHILE .T.
IF UPPER(LINE)="ENDIF"
EXIT
ENDIF
SKIP
ENDDO
ENDIF
IFTRUE = .F.
ENDPROC
**
* 

*
*
* secs.prg
*
*
* 
* 
*
SELECT STACK
APPEND BLANK
REPLACE STACK WITH ALLTRIM(STR(SECONDS(), 10, 3))
ENDPROC
**
* 

*
*
* quitaceros.prg
*
*
* 
* 
*
LPARAMETERS NUM
IF AT("E", UPPER(NUM))>0 .OR. AT(".", NUM)=0
RETURN NUM
ENDIF
ST = TRIM(NUM)
I = LEN(ST)
DO WHILE .T.
IF SUBSTR(ST, I, 1)="." .OR. SUBSTR(ST, I, 1)<>"0"
EXIT
ENDIF
I = I-1
ENDDO
IF SUBSTR(ST, I, 1)="."
RETURN SUBSTR(ST, 1, I-1)
ELSE
RETURN SUBSTR(ST, 1, I)
ENDIF
ENDFUNC
**
* 

*
*
* freeformat.prg
*
*
* 
* 
*
NUMDEC = 11
FIX = .F.
STANDARD = .T.
ENDPROC
**
* 

*
*
* rolld.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
NLEVELS = VAL(STACK)
DELETE
COUNT TO NSTACK
IF NSTACK<NLEVELS+1
DISPLAYX = "Error: too few stack levels"
RETURN
ENDIF
GOTO BOTTOM
LEVEL_X = STACK
FOR I = 1 TO NLEVELS-1
SKIP -1
TEMP_LEVEL = STACK
SKIP
REPLACE STACK WITH TEMP_LEVEL
SKIP -1
ENDFOR
REPLACE STACK WITH LEVEL_X
ENDPROC
**
* 

*
*
* f_roll.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
NLEVELS = VAL(STACK)
DELETE
COUNT TO NSTACK
IF NSTACK<NLEVELS+1
DISPLAYX = "Error: too few stack levels"
RETURN
ENDIF
GOTO BOTTOM
SKIP -NLEVELS+1
LEVEL_N = STACK
FOR I = 1 TO NLEVELS-1
SKIP
TEMP_LEVEL = STACK
SKIP -1
REPLACE STACK WITH TEMP_LEVEL
SKIP
ENDFOR
REPLACE STACK WITH LEVEL_N
ENDPROC
**
* 

*
*
* depth.prg
*
*
* 
* 
*
SELECT STACK
COUNT TO NLEVELS
APPEND BLANK
REPLACE STACK WITH ALLTRIM(STR(NLEVELS))
ENDPROC
**
* 

*
*
* drop2.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
DELETE
SKIP -1
DELETE
GOTO BOTTOM
ENDPROC
**
* 

*
*
* dropn.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
NLEVELS = VAL(STACK)
DELETE
SKIP -1
FOR I = 1 TO NLEVELS
DELETE
SKIP -1
ENDFOR
ENDPROC
**
* 

*
*
* dup2.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
SKIP -1
MVALUE = STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
SKIP -1
MVALUE = STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
ENDPROC
**
* 

*
*
* dupn.prg
*
*
* 
* 
*
SELECT STACK
GOTO BOTTOM
NLEVELS = VAL(STACK)
DELETE
GOTO BOTTOM
FOR I = 1 TO NLEVELS
SKIP -NLEVELS+1
MVALUE = STACK
APPEND BLANK
REPLACE STACK WITH MVALUE
ENDFOR
ENDPROC
**
* 

*
*
* f_end.prg
*
*
* 
* 
*
DO CASE
CASE INWHILE
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"WHILE"
SKIP -1
ENDDO
IF  .NOT. EOF()
ELSE
WAIT WINDOW AT 1, 1 "WHILE not found"
ENDIF
CASE INDO
SELECT STACK
LEVELX = STACK
DELETE
SKIP -1
SELECT PSTACK&SUBPROGNUM
IF VAL(LEVELX)=0
DO WHILE UPPER(LINE)<>"DO"
SKIP -1
ENDDO
IF EOF()
WAIT WINDOW AT 1, 1 "DO not found"
ENDIF
ENDIF
CASE INCASE .AND. OPTIONFOUND
SELECT PSTACK&SUBPROGNUM
DO WHILE UPPER(LINE)<>"ENDCASE"
SKIP
ENDDO
INCASE = .F.
OPTIONFOUND = .F.
CASE INCASE
INCASE = .F.
OPTIONFOUND = .F.
CASE INIF
INIF = .F.
ENDCASE
ENDPROC
**
* 

*
